---
- name: INTRO
  write: |-
    Observability Explained

    by All Things Code
  voice: Hi there, welcome to all things code. In this video, I'm gonna explain Observability.
- name: Overview
  voice: I'll start by explaining what observability is, why you need observability, and the three pillars of observability. Let's get started.
  diagram: |-
    digraph G {
      graph [fontname = "Handlee"];
      graph [ rankdir = LR]
      node [fontname = "Handlee"];
      edge [fontname = "Handlee"];
    
      obs -> what;
      obs -> why;
      obs -> threepillars;
      
      obs [label="Observability",style=filled,color=pink,fontcolor=black];
      what [label = "What is it?"];
      why [label = "Why need it?"];
      threepillars [label = "The Three Pillars"];
    }
- name: Observability
  voice: Observability is a measure of how well internal states of a system can be inferred from knowledge of its external outputs. 
  write: |-
    Observability is a measure of how well
    internal states of a system can be 
    inferred from knowledge of its
    external outputs. 

    - Wikipedia.

- name: ObservabilityInSimpleWord-1
  voice: Considering you want to know how well your system is running.
  diagram: |-
    digraph G {
      you -> system [label=" is it running well?"]
    }
- name: ObservabilityInSimpleWord-2
  voice: You introduce tools to expose the internal state of a system, so that you can ask for whether your system is running well.
  diagram: |-
    digraph G {
      observability_tool [label = "Observability Tools"];
      you -> observability_tool [label="ask for insights"];
      observability_tool -> system [label="expose state"];
    }
- name: ObservabilityInSimpleWord-3
  voice: An analogy in the real world is the car gauge, which provides the internal state for a car, such as speedometer, remaining fuel, etc.
  diagram: |-
    digraph G {
      gauge [label = "Gauge"];
      you -> gauge [label="is my car running well?"];
      gauge -> car [label="expose speedometer & remaining fuel"];
    }
- name: ObservabilityWhy
  voice: So why do we need observability? It's important for ensuring that the system can be properly maintained and controlled. It allows engineers to detect failures and take actions to keep the system running smoothly.
  write: |-
    WHY do we need observability?

    1. Properly maintain and control a system.
    2. Detect failures and take actions.
- name: ThreePillars-INTRO
  voice: The three pillars of observability are metrics, logs, and traces. These are the three main types of data that are used to monitor and understand the internal state of a system.
  diagram: |-
    digraph G {
      TheThreePillars [label="The Three Pillars"];
      TheThreePillars -> Metris;
      TheThreePillars -> Logs;
      TheThreePillars -> Traces;
    }
- name: Metrics-1
  voice: Metrics are numerical values collected at regular intervals that represent some aspect of the system's performance or behavior. We use metrics to to track trends and identify issues over time. 
  diagram: |-
    digraph G {
      rankdir = "TB";
      t1 -> t2 -> t3 -> t4 -> tn;
      t1 [label="1640995200 0.02"];
      t2 [label="1640995260 0.15"];
      t3 [label="1640995320 0.10"];
      t4 [label="1640995380 1.01"];
      tn [label="..."];
    }
- name: Metrics-2
  voice: Examples of metrics include CPU usage, memory usage, and response time.
  write: |-
    Examples

    - CPU usage
    - memory usage
    - response time.
    - ...
- name: Metrics-3
  voice: This one tells us that the CPU gradually goes to almost 100 percent in five minutes and become usable because the system can't handle any more tasks.
  diagram: |-
    digraph G {
      rankdir = "TB";
      t1 -> t2 -> t3 -> t4 -> tn;
      t1 [label="1640995200 0.02"];
      t2 [label="1640995260 13.15"];
      t3 [label="1640995320 40.99"];
      t4 [label="1640995380 99.01"];
      tn [label="..."];
    }
- name: Logs-1
  voice: Logs are event records that occur within a system. 
  diagram: |-
    digraph G {
      system -> event [label="occur"];
      event -> logfile [label="goes to"];
    }
- name: Logs-2
  voice: They can provide detailed information about the actions taken by a system and can be used to diagnose problems and understand how a system is behaving.
  write: |-
    Logs can be used to

    - Provide system information
    - Diagnose problems
    - Understand the system behavior
- name: Logs-3
  voice: For exmaple, this log file tells us the most recent requests landed on the Nginx server.
  image: ./nginx-access-log.webp
- name: Logs-4
  voice: Logs can be generated by the system itself, by applications running on the system, or by external sources.
  diagram: |-
    digraph G {
      compound=true;
      subgraph cluster_system {
        app1
        app2 [style=invis];
        graph[style=line];
        label="system";
      }
      ext [label="external source"];
      ext -> app2 [lhead=cluster_system label="collect"];
      ext -> logs [label="gen"];
      app1 -> logs [label="gen"];
      app2 -> logs [ltail=cluster_system label="gen"];
    }
- name: Traces
  voice: Traces are specialized logs to capture a series of distributed events that are caused by a single request through a system. They can provide insight into how different parts of a system are communicating with each other and can be used to identify performance bottlenecks and other issues.
  diagram: |-
    digraph G {
      rankdir = "TB";
      user -> t1 [label="trace1"];
      t1 -> t2 [label="trace2"]
      t2 -> t3 [label="trace3"];
      t2 -> t4 [label="trace4"];
      t1 -> t5 [label="trace5"];
      t5 -> t4 [label="trace6"];
    }
- name: Extra
  voice: "In addition, I want to talk two observability related concepts: alerts and dashboards."
  write: |-
    Alerts 
    Dashboard
- name: Alerts
  voice: Alerts are notifications that are triggered when checking certain conditions with metrics logs or traces. They can be used to alert human to issues so that they can be addressed quickly.
  diagram: |-
    digraph G {
      { rank=same;Alert;Human; }
      Alert -> TheThreePillars [label="check"];
      Alert -> Threshold [label="compare"];
      Alert -> Human [label="notify"];
    }
- name: Alerts-2
  voice: Alerts can be sent via email, SMS, or other communication channels.
  diagram: |-
    digraph G {
      Alert -> email;
      Alert -> SMS;
      Alert -> slack;
      Alert -> n;
      n [label="..."];
    }
- name: Dashboards
  voice: Dashboards are visual displays utilizing the three pillars and consists of charts or graphs that provide a real-time overview of a system's performance and behavior. They can be used to quickly identify trends and issues.
  diagram: |-
    digraph G {
      g [label="Charts or Graph"];
      Dashboard -> g [label="consists of"];
      g -> TheThreePillars [label="visualize"];
      human -> Dashboard [label="identify trends and issues"];
    }
- name: Ending
  voice: I hope this video gives you essential knowledge about oservability. Thanks for watching, and don't forget to like and subscribe for more videos from All Things Code.
  write: |-
    Like & Subscribe

    Youtube Channel: All Things Code
